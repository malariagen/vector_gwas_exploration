# ruff: noqa: F841

import pandas as pd
import numpy as np
import os
from bokeh.plotting import figure, show, output_file
from bokeh.models import (
    ColumnDataSource,
    HoverTool,
    CustomJS,
    TapTool,
    Div,
    NumeralTickFormatter,
    TabPanel,
    Tabs,
    BoxSelectTool,
)
from bokeh.layouts import column


def build_standalone_html():
    """
    Loads mock GWAS data and builds a robust, standalone, interactive Bokeh dashboard.
    """
    print("--- Building GWAS Explorer HTML ---")

    # --- 1. Load Data ---
    script_dir = os.path.dirname(os.path.abspath(__file__))
    project_root = os.path.abspath(os.path.join(script_dir, "../../"))
    data_path = os.path.join(project_root, "data/")
    output_path = os.path.join(project_root, "output/")

    try:
        gwas_full_df = pd.read_csv(os.path.join(data_path, "mock_gwas_full_scan.csv"))
        verified_hits_df = pd.read_csv(
            os.path.join(data_path, "mock_verification_hits.csv")
        )
        gene_annotations_df = pd.read_csv(
            os.path.join(data_path, "mock_gene_annotations.csv")
        )
        print("All mock data files loaded successfully.")
    except FileNotFoundError as e:
        print(
            f"Error: {e}. Please ensure mock data is generated by running the `00_generate_mock_data.ipynb` notebook."
        )
        return

    # --- 2. Prepare Data Sources ---
    gwas_full_df["-log10(p)_display"] = gwas_full_df["-log10(p)"].clip(upper=12)
    contig_order = ["2L", "2R", "3L", "3R", "X"]
    contig_starts = {}
    gwas_full_df["contig_cat"] = pd.Categorical(
        gwas_full_df["contig"], categories=contig_order, ordered=True
    )
    gwas_full_df = gwas_full_df.sort_values(["contig_cat", "pos"])

    jitter_amount = 0.25
    gwas_full_df["-log10(p)_jittered"] = gwas_full_df["-log10(p)"] + np.random.uniform(
        -jitter_amount, jitter_amount, size=len(gwas_full_df)
    )

    cumulative_pos = 0
    contig_centers = {}
    gwas_full_df["pos_cumulative"] = 0
    for contig in contig_order:
        subset = gwas_full_df[gwas_full_df["contig"] == contig]
        if not subset.empty:
            gwas_full_df.loc[subset.index, "pos_cumulative"] = (
                subset["pos"] + cumulative_pos
            )
            contig_starts[contig] = cumulative_pos
            contig_centers[contig] = cumulative_pos + subset["pos"].median()
            cumulative_pos += subset["pos"].max()
    gwas_full_df["color"] = gwas_full_df["contig_cat"].cat.codes.apply(
        lambda x: "#2c3e50" if x % 2 == 0 else "#7f8c8d"
    )
    verified_hits_df["-log10(p)"] = -np.log10(verified_hits_df["p_value"])

    n_points_to_plot = 150000
    significant_points = gwas_full_df[gwas_full_df["-log10(p)"] > 4]
    non_significant_points = gwas_full_df[gwas_full_df["-log10(p)"] <= 4]
    background_sample = non_significant_points.sample(
        n=min(n_points_to_plot - len(significant_points), len(non_significant_points)),
        random_state=42,
    )
    plot_df = pd.concat([significant_points, background_sample])

    full_scan_source = ColumnDataSource(plot_df)
    regional_scan_source = ColumnDataSource(
        data={"pos": [], "-log10(p)": [], "-log10(p)_jittered": [], "p_value": []}
    )
    regional_hits_source = ColumnDataSource(
        data={
            "pos": [],
            "-log10(p)": [],
            "log_odds_mixed": [],
            "ci_lower_mixed": [],
            "ci_upper_mixed": [],
        }
    )
    gene_source = ColumnDataSource(
        data={
            "start": [],
            "end": [],
            "gene_name": [],
            "y_top": [],
            "y_bottom": [],
            "description": [],
        }
    )
    gene_text_source = ColumnDataSource(data={"x": [], "y": [], "text": []})

    instructions_div = Div(
        text="""
        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
            <h3 style="margin-top: 0;"> GWAS Explorer - Interactive Instructions</h3>
            <ol style="margin-bottom: 0;">
                <li><b>Tab 1 - Genome-Wide Scan:</b> View Manhattan plot of all SNPs. Use the "Box Select" tool (the rectangle in the toolbar) to click and drag over a region of interest.</li>
                <li><b>Tab 2 - Regional Detail:</b> This tab will automatically open, showing a zoomed-in view of your selection with verified hits (red dots) and gene annotations.</li>
                <li><b>Tab 3 - SNP Detail:</b> Click on a red "Verified Hit" point in the regional plot to see detailed statistics for that specific SNP.</li>
            </ol>
            <p style="margin-bottom: 0;"><b> Tip:</b> Use the mouse wheel to zoom, drag to pan, and click the "Reset" icon in the toolbar to go back to the default view.</p>
        </div>
        """,
        width=1200,
    )

    empty_state_div = Div(
        text="""
        <div style="text-align: center; padding: 50px; color: #666;">
            <h3>No Region Selected</h3>
            <p>Please select a region in the <b>Genome-Wide Scan (Tab 1)</b> by clicking and dragging with the Box Select tool.</p>
        </div>
        """,
        width=1200,
    )

    detail_title = Div(
        text="""
        <div style="text-align: center; padding: 50px; color: #666;">
            <h3>No SNP Selected</h3>
            <p>Click on a red "Verified Hit" in the <b>Regional Detail (Tab 2)</b> to see detailed statistics.</p>
        </div>
        """,
        width=800,
    )

    # --- 3. Create Plots and Widgets ---
    p1 = figure(
        height=400,
        width=1200,
        title="GWAS Explorer: Genome-Wide Manhattan Plot",
        tools="pan,wheel_zoom,reset,save",
    )
    p1.add_tools(
        HoverTool(
            tooltips=[
                ("Chromosome", "@contig"),
                ("Position", "@pos{0,0}"),
                ("P-value", "@p_value{1.1e}"),
            ]
        )
    )
    box_select = BoxSelectTool()
    p1.add_tools(box_select)
    p1.toolbar.active_drag = box_select
    p1.scatter(
        x="pos_cumulative",
        y="-log10(p)_display",
        color="color",
        source=full_scan_source,
        alpha=0.7,
        size=4,
    )
    p1.xaxis.ticker = list(contig_centers.values())
    p1.xaxis.major_label_overrides = {int(v): k for k, v in contig_centers.items()}
    p1.x_range.range_padding = 0.02
    p1.yaxis.axis_label = "-log10(p-value)"
    p1.xaxis.axis_label = "Chromosome"

    p2_hover_verified = HoverTool(
        tooltips=[
            ("Type", "Verified Hit"),
            ("Position", "@pos{0,0}"),
            ("Log-Odds", "@log_odds_mixed{0.00}"),
        ]
    )
    p2_hover_genes = HoverTool(
        tooltips=[
            ("Type", "Gene"),
            ("Name", "@gene_name"),
            ("Description", "@description"),
        ]
    )

    p2 = figure(
        height=400,
        width=1200,
        title="Regional Plot",
        tools=["pan", "wheel_zoom", "box_zoom", "reset", "save", TapTool()],
    )

    gray_renderer = p2.scatter(
        x="pos",
        y="-log10(p)_jittered",
        source=regional_scan_source,
        size=5,
        color="gray",
        alpha=0.6,
        legend_label="All Scan SNPs",
    )
    red_renderer = p2.scatter(
        x="pos",
        y="-log10(p)",
        source=regional_hits_source,
        size=8,
        color="red",
        legend_label="Verified Hits (Mixed-Effects)",
        name="verified_hits_glyph",
    )
    gene_renderer = p2.quad(
        top="y_top",
        bottom="y_bottom",
        left="start",
        right="end",
        source=gene_source,
        fill_color="blue",
        line_color="darkblue",
        alpha=0.3,
        legend_label="Genes",
    )
    gene_text_renderer = p2.text(
        x="x",
        y="y",
        text="text",
        source=gene_text_source,
        text_font_size="10pt",
        text_color="darkblue",
        text_align="center",
        text_baseline="middle",
    )

    p2_hover_verified.renderers = [red_renderer]
    p2_hover_genes.renderers = [gene_renderer]
    p2.add_tools(p2_hover_verified, p2_hover_genes)

    p2.legend.location = "top_left"
    p2.legend.click_policy = "hide"
    p2.xaxis.formatter = NumeralTickFormatter(format="0,0")
    p2.yaxis.axis_label = "-log10(p-value) [jittered]"
    p2.xaxis.axis_label = "Position on Chromosome"

    visibility_callback = CustomJS(
        args=dict(text_renderer=gene_text_renderer),
        code="""
        // When the legend for the gene rectangles is clicked,
        // this callback forces the visibility of the text labels to match.
        text_renderer.visible = cb_obj.visible;
    """,
    )
    gene_renderer.js_on_change("visible", visibility_callback)

    # --- 4. Create Tabs ---
    tabs = Tabs(
        tabs=[
            TabPanel(child=p1, title="1. Genome-Wide Scan"),
            TabPanel(
                child=column(empty_state_div, p2, sizing_mode="scale_width"),
                title="2. Regional Detail",
            ),
            TabPanel(child=detail_title, title="3. SNP Detail"),
        ]
    )

    final_layout = column(instructions_div, tabs)

    # --- 5. Define Interactivity with CustomJS ---
    box_select_callback = CustomJS(
        args=dict(
            full_scan_source_all=ColumnDataSource(gwas_full_df),
            regional_scan_source=regional_scan_source,
            all_hits_data=ColumnDataSource(verified_hits_df),
            regional_hits_source=regional_hits_source,
            all_genes=ColumnDataSource(gene_annotations_df),
            gene_source=gene_source,
            gene_text_source=gene_text_source,
            p2=p2,
            tabs=tabs,
            contig_starts=contig_starts,
            contig_order=contig_order,
            detail_title=detail_title,
            empty_state_div=empty_state_div,
            manhattan_source=full_scan_source,
        ),
        code="""
            const selected_indices = manhattan_source.selected.indices;
            if (selected_indices.length == 0) { return; }

            let min_cumulative_pos = Infinity, max_cumulative_pos = -Infinity;
            for (const index of selected_indices) {
                const pos = manhattan_source.data.pos_cumulative[index];
                if (pos < min_cumulative_pos) min_cumulative_pos = pos;
                if (pos > max_cumulative_pos) max_cumulative_pos = pos;
            }

            let selected_contig = null, contig_offset = 0;
            for (const contig of contig_order) {
                if (min_cumulative_pos >= contig_starts[contig]) {
                    selected_contig = contig;
                    contig_offset = contig_starts[contig];
                } else { break; }
            }
            if (!selected_contig) { return; }
            
            const min_pos = min_cumulative_pos - contig_offset;
            const max_pos = max_cumulative_pos - contig_offset;
            
            empty_state_div.visible = false;
            detail_title.text = `<div style="text-align: center; padding: 50px; color: #666;"><h3>No SNP Selected</h3><p>Click on a red verification hit in the Regional Detail plot to see detailed statistics.</p></div>`;
            
            const all_scan = full_scan_source_all.data;
            const new_regional_scan = {pos: [], '-log10(p)': [], '-log10(p)_jittered': [], 'p_value': []};
            let max_logp = 0;
            for (let i=0; i < all_scan.pos.length; i++) {
                if (all_scan.contig[i] === selected_contig && all_scan.pos[i] >= min_pos && all_scan.pos[i] <= max_pos) {
                    new_regional_scan.pos.push(all_scan.pos[i]);
                    const logp = all_scan['-log10(p)'][i];
                    new_regional_scan['-log10(p)'].push(logp);
                    new_regional_scan['-log10(p)_jittered'].push(all_scan['-log10(p)_jittered'][i]);
                    new_regional_scan.p_value.push(all_scan['p_value'][i]);
                    if (logp > max_logp) max_logp = logp;
                }
            }
            regional_scan_source.data = new_regional_scan;

            const all_hits = all_hits_data.data;
            const new_regional_hits = {pos: [], '-log10(p)': [], log_odds_mixed: [], ci_lower_mixed: [], ci_upper_mixed: []};
            for (let i=0; i < all_hits.pos.length; i++) {
                if (all_hits.contig[i] === selected_contig && all_hits.pos[i] >= min_pos && all_hits.pos[i] <= max_pos) {
                    for (const key in new_regional_hits) { new_regional_hits[key].push(all_hits[key][i]); }
                }
            }
            regional_hits_source.data = new_regional_hits;

            const all_gene_data = all_genes.data;
            const new_gene = {start: [], end: [], gene_name: [], y_top: [], y_bottom: [], description: []};
            const new_gene_text = {x: [], y: [], text: []};
            let genes_found = 0;
            for (let i=0; i < all_gene_data.start.length; i++) {
                if (all_gene_data.contig[i] === selected_contig && 
                    all_gene_data.end[i] >= min_pos && 
                    all_gene_data.start[i] <= max_pos) {
                    
                    const y_center = -0.6 - (genes_found % 3) * 0.5; // Stagger genes in 3 tracks
                    
                    new_gene.start.push(all_gene_data.start[i]);
                    new_gene.end.push(all_gene_data.end[i]);
                    new_gene.gene_name.push(all_gene_data.gene_name[i]);
                    new_gene.y_top.push(y_center + 0.2); // Top of quad
                    new_gene.y_bottom.push(y_center - 0.2); // Bottom of quad
                    new_gene.description.push(all_gene_data.description ? all_gene_data.description[i] : 'N/A');
                    
                    // The text label y-coordinate now matches the rectangle's center
                    new_gene_text.x.push((all_gene_data.start[i] + all_gene_data.end[i]) / 2);
                    new_gene_text.y.push(y_center); 
                    new_gene_text.text.push(all_gene_data.gene_name[i]);
                    
                    genes_found++;
                }
            }
            gene_source.data = new_gene;
            gene_text_source.data = new_gene_text;
            
            p2.x_range.start = min_pos; 
            p2.x_range.end = max_pos;
            p2.y_range.start = -2.5; // Ensure y-axis is low enough to see all staggered tracks
            p2.y_range.end = max_logp > 0 ? max_logp * 1.1 : 10;
            p2.title.text = `Regional Plot: Chromosome ${selected_contig} from ${Math.round(min_pos).toLocaleString()} to ${Math.round(max_pos).toLocaleString()}`;
            
            regional_scan_source.change.emit();
            regional_hits_source.change.emit();
            gene_source.change.emit();
            gene_text_source.change.emit();

            manhattan_source.selected.indices = [];
            tabs.active = 1;
        """,
    )
    full_scan_source.selected.js_on_change("indices", box_select_callback)

    tap_callback = CustomJS(
        args=dict(source=regional_hits_source, detail_title=detail_title, tabs=tabs),
        code="""
            const indices = source.selected.indices;
            if (!indices || indices.length == 0) { return; }
            const i = indices[0];
            const data = source.data;
            const pos = data['pos'][i].toLocaleString();
            const log_odds = data['log_odds_mixed'][i].toFixed(2);
            const lower = data['ci_lower_mixed'][i].toFixed(2);
            const upper = data['ci_upper_mixed'][i].toFixed(2);
            const logp = data['-log10(p)'][i].toFixed(2);
            const pval = Math.pow(10, -data['-log10(p)'][i]).toExponential(2);
            
            detail_title.text = `
                <div style="background-color: #f8f9fa; padding: 20px; border-radius: 5px;">
                    <h3 style="color: #2c3e50; margin-top: 0;"> SNP Details: Position ${pos}</h3>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 20px;">
                        <div>
                            <h4 style="color: #34495e; border-bottom: 2px solid #3498db; padding-bottom: 5px;">
                                Association Statistics
                            </h4>
                            <ul style="list-style: none; padding: 0;">
                                <li style="margin: 10px 0;"><b>-log10(p-value):</b> ${logp}</li>
                                <li style="margin: 10px 0;"><b>P-value:</b> ${pval}</li>
                            </ul>
                        </div>
                        <div>
                            <h4 style="color: #34495e; border-bottom: 2px solid #e74c3c; padding-bottom: 5px;">
                                Mixed-Effects Model
                            </h4>
                            <ul style="list-style: none; padding: 0;">
                                <li style="margin: 10px 0;"><b>Log-Odds Ratio:</b> ${log_odds}</li>
                                <li style="margin: 10px 0;"><b>95% CI:</b> [${lower}, ${upper}]</li>
                            </ul>
                        </div>
                    </div>
                </div>
            `;
            tabs.active = 2;
        """,
    )
    p2.select(name="verified_hits_glyph")[0].data_source.selected.js_on_change(
        "indices", tap_callback
    )

    # --- 6. Save ---
    if not os.path.exists(output_path):
        os.makedirs(output_path)
    output_html_path = os.path.join(output_path, "gwas_explorer.html")
    output_file(output_html_path, title="GWAS Explorer")
    show(final_layout)
    print(
        f"Successfully generated standalone HTML file at: {os.path.abspath(output_html_path)}"
    )


if __name__ == "__main__":
    build_standalone_html()
